import numpy as np 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, precision_score, recall_score

mov=pd.read_csv("movies.csv")
mov

mov.head()

mov.tail()

mov.index

mov.info

mov.describe()

mov.shape

mov.columns

print("Null data: ", mov.isna().sum())
print("Duplicate data: ", mov.duplicated().sum())



# Split and count movie genres
genre_counts = mov["movie_type"].str.split("|", expand=True).stack().value_counts()

# Select the top 10 genres (excluding missing category)
top_10_genres = genre_counts.drop("(no genres listed)", errors="ignore").head(10)

# Plot the corrected bar chart
plt.figure(figsize=(10, 5))
sns.barplot(x=top_10_genres.values, y=top_10_genres.index, palette="coolwarm")

# Labels and title
plt.xlabel("Number of Movies")
plt.ylabel("Genres")
plt.title("Top 10 Movie Genres Count")

# Show plot
plt.show()

# Count occurrences of each genre
genre_counts = mov['movie_type'].value_counts().head(10)  # Top 10 genres

# Create a Pie Chart
plt.figure(figsize=(8, 8))
plt.pie(genre_counts, labels=genre_counts.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
plt.title("Top 10 Movie Genres Distribution")
plt.show()

plt.figure(figsize=(8, 5))
sns.histplot(genre_counts, bins=10, kde=True, color="blue")
plt.xlabel("Genres")
plt.ylabel("Number of Movies")
plt.title("Distribution of Movies per Genre")
plt.show()

plt.figure(figsize=(8, 5))
sns.histplot(genre_counts, bins=10, kde=True, color="blue")
plt.xlabel("Genres")
plt.ylabel("Number of Movies")
plt.title("Distribution of Movies per Genre")
plt.show()

plt.figure(figsize=(8, 5))
sns.histplot(genre_counts, bins=10, kde=True, color="blue")
plt.xlabel("Genres")
plt.ylabel("Number of Movies")
plt.title("Distribution of Movies per Genre")
plt.show()

plt.figure(figsize=(8, 5))
sns.boxplot(x=mov["movie_id"], color="green")
plt.xlabel("Movie ID")
plt.title("Distribution of Movie IDs")
plt.show()

# Extract Year from Title (if present in dataset)
mov["year"] = mov["movie_name"].str.extract(r"\((\d{4})\)")

# Drop missing years
mov = mov.dropna(subset=["year"])

# Convert to integer
mov["year"] = mov["year"].astype(int)

# Plot Movies Per Year
plt.figure(figsize=(12, 5))
sns.countplot(x=mov["year"], palette="coolwarm", order=mov["year"].value_counts().index[:20])
plt.xticks(rotation=45)
plt.xlabel("Year")
plt.ylabel("Number of Movies")
plt.title("Number of Movies Released Per Year (Top 20)")
plt.show()

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report

# Display first few rows  
print(mov.head()

# Display first few rows  
print(mov.columns)

# Split dataset into train and test sets  
trainset, testset = train_test_split(mov, test_size=0.2, random_state=42)

print(mov.info())

print(mov.dropna())

target_column = mov.columns[-1]  # Assuming the last column is the target
print(f'Target column identified: {target_column}')

label_encoders = {}
for column in mov.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    mov[column] = le.fit_transform(mov[column])
    label_encoders[column] = le

X = mov.drop(columns=[target_column])
y = mov[target_column]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier(n_neighbors=5)  # Default is 5 neighbors
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

#Calculate Mean Squared Error (MSE)
mse_value = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error (MSE): {mse_value:.2f}')

#Calculate Root Mean Squared Error (RMSE)
rmse_value = np.sqrt(mse_value)
print(f'Root Mean Squared Error (RMSE): {rmse_value:.2f}')

#Calculate Precision and Recall
precision = precision_score(y_test, y_pred, average='weighted', zero_division=1)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=1)

print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
